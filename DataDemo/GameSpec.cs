// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameSpec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameSpec {

  /// <summary>Holder for reflection information generated from GameSpec.proto</summary>
  public static partial class GameSpecReflection {

    #region Descriptor
    /// <summary>File descriptor for GameSpec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameSpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5HYW1lU3BlYy5wcm90bxIIR2FtZVNwZWMiWAoHQmFnSXRlbRIOCgZpdGVt",
            "SUQYASABKAUSDgoGdHlwZUlEGAIgASgFEg0KBWNvdW50GAMgASgFEg4KBm92",
            "ZXJseRgEIAEoBRIOCgZiaW5kZWQYBSABKAgifgoJRXF1aXBJdGVtEg4KBml0",
            "ZW1JRBgBIAEoBRIOCgZ0eXBlSUQYAiABKAUSDQoFY291bnQYAyABKAUSDgoG",
            "b3Zlcmx5GAQgASgFEg4KBmJpbmRlZBgFIAEoCBIOCgZhdHRhY2sYBiABKAUS",
            "EgoKZHVyYWJpbGl0eRgHIAEoBSJNCgxDdXJyZW5jeUl0ZW0SDgoGaXRlbUlE",
            "GAEgASgFEg4KBnR5cGVJRBgCIAEoBRINCgVjb3VudBgDIAEoBRIOCgZvdmVy",
            "bHkYBCABKAUiewoHQmFnSW5mbxIeCgNiYWcYASADKAsyES5HYW1lU3BlYy5C",
            "YWdJdGVtEiYKCWVxdWlwbWVudBgCIAMoCzITLkdhbWVTcGVjLkVxdWlwSXRl",
            "bRIoCghjdXJyZW5jeRgDIAMoCzIWLkdhbWVTcGVjLkN1cnJlbmN5SXRlbSJf",
            "CgdQbGF5ZXJzEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDAoEcmFuaxgD",
            "IAEoBRILCgNleHAYBCABKAUSHwoEYmFncxgFIAEoCzIRLkdhbWVTcGVjLkJh",
            "Z0luZm8iKwoKQWRkSXRlbVJlcRIOCgZpdGVtSUQYASABKAUSDQoFY291bnQY",
            "AiABKAUiMgoKQWRkSXRlbVJzcBIkCgdlcnJDb2RlGAEgASgOMhMuR2FtZVNw",
            "ZWMuRXJyb3JDb2RlIjAKDkN0bE1zZ0xvZ2luUmVxEgwKBE5hbWUYASABKAkS",
            "EAoIcGFzc3dvcmQYAiABKAkiWQoOQ3RsTXNnTG9naW5Sc3ASJAoHZXJyQ29k",
            "ZRgBIAEoDjITLkdhbWVTcGVjLkVycm9yQ29kZRIhCgZwbGF5ZXIYAiABKAsy",
            "ES5HYW1lU3BlYy5QbGF5ZXJzIisKD0N0bE1zZ1NlYXJjaFJlcRIKCgJpZBgB",
            "IAEoBRIMCgROYW1lGAIgASgJIloKD0N0bE1zZ1NlYXJjaFJzcBIkCgdlcnJD",
            "b2RlGAEgASgOMhMuR2FtZVNwZWMuRXJyb3JDb2RlEiEKBnBsYXllchgCIAEo",
            "CzIRLkdhbWVTcGVjLlBsYXllcnMiOwoNUmVtb3ZlSXRlbVJlcRIOCgZpdGVt",
            "SUQYASABKAUSDQoFY291bnQYAiABKAUSCwoDcG9zGAMgASgFIjUKDVJlbW92",
            "ZUl0ZW1Sc3ASJAoHZXJyQ29kZRgBIAEoDjITLkdhbWVTcGVjLkVycm9yQ29k",
            "ZSIlCgdSYW5rUmVxEg0KBXN0YXJ0GAEgASgFEgsKA2VuZBgCIAEoBSIvCgdS",
            "YW5rUnNwEiQKB2VyckNvZGUYASABKA4yEy5HYW1lU3BlYy5FcnJvckNvZGUq",
            "fQoJRXJyb3JDb2RlEhIKDkVSUk9SX05PX0VSUk9SEAASEwoPRVJST1JfQVVI",
            "X0VSUk9SEAESFQoRRVJST1JfU0VBUkNIX0ZBSUwQAhIXChNFUlJPUl9SRVZf",
            "SVRFTV9GQUlMEAMSFwoTRVJST1JfQUREX0l0RU1fRkFJTBAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameSpec.ErrorCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.BagItem), global::GameSpec.BagItem.Parser, new[]{ "ItemID", "TypeID", "Count", "Overly", "Binded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.EquipItem), global::GameSpec.EquipItem.Parser, new[]{ "ItemID", "TypeID", "Count", "Overly", "Binded", "Attack", "Durability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.CurrencyItem), global::GameSpec.CurrencyItem.Parser, new[]{ "ItemID", "TypeID", "Count", "Overly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.BagInfo), global::GameSpec.BagInfo.Parser, new[]{ "Bag", "Equipment", "Currency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.Players), global::GameSpec.Players.Parser, new[]{ "Id", "Name", "Rank", "Exp", "Bags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.AddItemReq), global::GameSpec.AddItemReq.Parser, new[]{ "ItemID", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.AddItemRsp), global::GameSpec.AddItemRsp.Parser, new[]{ "ErrCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.CtlMsgLoginReq), global::GameSpec.CtlMsgLoginReq.Parser, new[]{ "Name", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.CtlMsgLoginRsp), global::GameSpec.CtlMsgLoginRsp.Parser, new[]{ "ErrCode", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.CtlMsgSearchReq), global::GameSpec.CtlMsgSearchReq.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.CtlMsgSearchRsp), global::GameSpec.CtlMsgSearchRsp.Parser, new[]{ "ErrCode", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.RemoveItemReq), global::GameSpec.RemoveItemReq.Parser, new[]{ "ItemID", "Count", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.RemoveItemRsp), global::GameSpec.RemoveItemRsp.Parser, new[]{ "ErrCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.RankReq), global::GameSpec.RankReq.Parser, new[]{ "Start", "End" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSpec.RankRsp), global::GameSpec.RankRsp.Parser, new[]{ "ErrCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ErrorCode {
    [pbr::OriginalName("ERROR_NO_ERROR")] ErrorNoError = 0,
    [pbr::OriginalName("ERROR_AUH_ERROR")] ErrorAuhError = 1,
    [pbr::OriginalName("ERROR_SEARCH_FAIL")] ErrorSearchFail = 2,
    [pbr::OriginalName("ERROR_REV_ITEM_FAIL")] ErrorRevItemFail = 3,
    [pbr::OriginalName("ERROR_ADD_ItEM_FAIL")] ErrorAddItEmFail = 4,
  }

  #endregion

  #region Messages
  public sealed partial class BagItem : pb::IMessage<BagItem> {
    private static readonly pb::MessageParser<BagItem> _parser = new pb::MessageParser<BagItem>(() => new BagItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BagItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItem(BagItem other) : this() {
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      count_ = other.count_;
      overly_ = other.overly_;
      binded_ = other.binded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItem Clone() {
      return new BagItem(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// itemid = 这个道具的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    /// <summary>
    /// typeid = 装备、材料、货币任务道具等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    /// 数量  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "overly" field.</summary>
    public const int OverlyFieldNumber = 4;
    private int overly_;
    /// <summary>
    /// 最大叠加数量,暂时在util.h中配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Overly {
      get { return overly_; }
      set {
        overly_ = value;
      }
    }

    /// <summary>Field number for the "binded" field.</summary>
    public const int BindedFieldNumber = 5;
    private bool binded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Binded {
      get { return binded_; }
      set {
        binded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BagItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BagItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (Count != other.Count) return false;
      if (Overly != other.Overly) return false;
      if (Binded != other.Binded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Overly != 0) hash ^= Overly.GetHashCode();
      if (Binded != false) hash ^= Binded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Overly != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Overly);
      }
      if (Binded != false) {
        output.WriteRawTag(40);
        output.WriteBool(Binded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Overly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Overly);
      }
      if (Binded != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BagItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Overly != 0) {
        Overly = other.Overly;
      }
      if (other.Binded != false) {
        Binded = other.Binded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Overly = input.ReadInt32();
            break;
          }
          case 40: {
            Binded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipItem : pb::IMessage<EquipItem> {
    private static readonly pb::MessageParser<EquipItem> _parser = new pb::MessageParser<EquipItem>(() => new EquipItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItem(EquipItem other) : this() {
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      count_ = other.count_;
      overly_ = other.overly_;
      binded_ = other.binded_;
      attack_ = other.attack_;
      durability_ = other.durability_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipItem Clone() {
      return new EquipItem(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// itemid = 这个道具的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    /// <summary>
    /// typeid = 装备、材料、货币任务道具等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    /// 数量  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "overly" field.</summary>
    public const int OverlyFieldNumber = 4;
    private int overly_;
    /// <summary>
    /// 最大叠加数量,暂时在util.h中配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Overly {
      get { return overly_; }
      set {
        overly_ = value;
      }
    }

    /// <summary>Field number for the "binded" field.</summary>
    public const int BindedFieldNumber = 5;
    private bool binded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Binded {
      get { return binded_; }
      set {
        binded_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 6;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 7;
    private int durability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (Count != other.Count) return false;
      if (Overly != other.Overly) return false;
      if (Binded != other.Binded) return false;
      if (Attack != other.Attack) return false;
      if (Durability != other.Durability) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Overly != 0) hash ^= Overly.GetHashCode();
      if (Binded != false) hash ^= Binded.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Overly != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Overly);
      }
      if (Binded != false) {
        output.WriteRawTag(40);
        output.WriteBool(Binded);
      }
      if (Attack != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Attack);
      }
      if (Durability != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Durability);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Overly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Overly);
      }
      if (Binded != false) {
        size += 1 + 1;
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durability);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Overly != 0) {
        Overly = other.Overly;
      }
      if (other.Binded != false) {
        Binded = other.Binded;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Overly = input.ReadInt32();
            break;
          }
          case 40: {
            Binded = input.ReadBool();
            break;
          }
          case 48: {
            Attack = input.ReadInt32();
            break;
          }
          case 56: {
            Durability = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyItem : pb::IMessage<CurrencyItem> {
    private static readonly pb::MessageParser<CurrencyItem> _parser = new pb::MessageParser<CurrencyItem>(() => new CurrencyItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyItem(CurrencyItem other) : this() {
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      count_ = other.count_;
      overly_ = other.overly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyItem Clone() {
      return new CurrencyItem(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// itemid = 这个道具的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "typeID" field.</summary>
    public const int TypeIDFieldNumber = 2;
    private int typeID_;
    /// <summary>
    /// typeid = 装备、材料、货币任务道具等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    /// 数量  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "overly" field.</summary>
    public const int OverlyFieldNumber = 4;
    private int overly_;
    /// <summary>
    /// 最大叠加数量,暂时在util.h中配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Overly {
      get { return overly_; }
      set {
        overly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (Count != other.Count) return false;
      if (Overly != other.Overly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Overly != 0) hash ^= Overly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TypeID);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Overly != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Overly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Overly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Overly);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Overly != 0) {
        Overly = other.Overly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            TypeID = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Overly = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BagInfo : pb::IMessage<BagInfo> {
    private static readonly pb::MessageParser<BagInfo> _parser = new pb::MessageParser<BagInfo>(() => new BagInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagInfo(BagInfo other) : this() {
      bag_ = other.bag_.Clone();
      equipment_ = other.equipment_.Clone();
      currency_ = other.currency_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagInfo Clone() {
      return new BagInfo(this);
    }

    /// <summary>Field number for the "bag" field.</summary>
    public const int BagFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSpec.BagItem> _repeated_bag_codec
        = pb::FieldCodec.ForMessage(10, global::GameSpec.BagItem.Parser);
    private readonly pbc::RepeatedField<global::GameSpec.BagItem> bag_ = new pbc::RepeatedField<global::GameSpec.BagItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSpec.BagItem> Bag {
      get { return bag_; }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameSpec.EquipItem> _repeated_equipment_codec
        = pb::FieldCodec.ForMessage(18, global::GameSpec.EquipItem.Parser);
    private readonly pbc::RepeatedField<global::GameSpec.EquipItem> equipment_ = new pbc::RepeatedField<global::GameSpec.EquipItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSpec.EquipItem> Equipment {
      get { return equipment_; }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameSpec.CurrencyItem> _repeated_currency_codec
        = pb::FieldCodec.ForMessage(26, global::GameSpec.CurrencyItem.Parser);
    private readonly pbc::RepeatedField<global::GameSpec.CurrencyItem> currency_ = new pbc::RepeatedField<global::GameSpec.CurrencyItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSpec.CurrencyItem> Currency {
      get { return currency_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bag_.Equals(other.bag_)) return false;
      if(!equipment_.Equals(other.equipment_)) return false;
      if(!currency_.Equals(other.currency_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bag_.GetHashCode();
      hash ^= equipment_.GetHashCode();
      hash ^= currency_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bag_.WriteTo(output, _repeated_bag_codec);
      equipment_.WriteTo(output, _repeated_equipment_codec);
      currency_.WriteTo(output, _repeated_currency_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bag_.CalculateSize(_repeated_bag_codec);
      size += equipment_.CalculateSize(_repeated_equipment_codec);
      size += currency_.CalculateSize(_repeated_currency_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BagInfo other) {
      if (other == null) {
        return;
      }
      bag_.Add(other.bag_);
      equipment_.Add(other.equipment_);
      currency_.Add(other.currency_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bag_.AddEntriesFrom(input, _repeated_bag_codec);
            break;
          }
          case 18: {
            equipment_.AddEntriesFrom(input, _repeated_equipment_codec);
            break;
          }
          case 26: {
            currency_.AddEntriesFrom(input, _repeated_currency_codec);
            break;
          }
        }
      }
    }

        public BagItem BagItem
        {
            get => default;
            set
            {
            }
        }
    }

    public sealed partial class Players : pb::IMessage<Players> {
    private static readonly pb::MessageParser<Players> _parser = new pb::MessageParser<Players>(() => new Players());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Players> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players(Players other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      rank_ = other.rank_;
      exp_ = other.exp_;
      bags_ = other.bags_ != null ? other.bags_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players Clone() {
      return new Players(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "bags" field.</summary>
    public const int BagsFieldNumber = 5;
    private global::GameSpec.BagInfo bags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.BagInfo Bags {
      get { return bags_; }
      set {
        bags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Players);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Players other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Rank != other.Rank) return false;
      if (Exp != other.Exp) return false;
      if (!object.Equals(Bags, other.Bags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (bags_ != null) hash ^= Bags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Exp);
      }
      if (bags_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Bags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (bags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Players other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.bags_ != null) {
        if (bags_ == null) {
          Bags = new global::GameSpec.BagInfo();
        }
        Bags.MergeFrom(other.Bags);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Exp = input.ReadInt32();
            break;
          }
          case 42: {
            if (bags_ == null) {
              Bags = new global::GameSpec.BagInfo();
            }
            input.ReadMessage(Bags);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddItemReq : pb::IMessage<AddItemReq> {
    private static readonly pb::MessageParser<AddItemReq> _parser = new pb::MessageParser<AddItemReq>(() => new AddItemReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddItemReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemReq(AddItemReq other) : this() {
      itemID_ = other.itemID_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemReq Clone() {
      return new AddItemReq(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// itemid = 这个道具的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 数量  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddItemReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddItemRsp : pb::IMessage<AddItemRsp> {
    private static readonly pb::MessageParser<AddItemRsp> _parser = new pb::MessageParser<AddItemRsp>(() => new AddItemRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddItemRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemRsp(AddItemRsp other) : this() {
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddItemRsp Clone() {
      return new AddItemRsp(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::GameSpec.ErrorCode errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.ErrorCode ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddItemRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddItemRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddItemRsp other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = (global::GameSpec.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CtlMsgLoginReq : pb::IMessage<CtlMsgLoginReq> {
    private static readonly pb::MessageParser<CtlMsgLoginReq> _parser = new pb::MessageParser<CtlMsgLoginReq>(() => new CtlMsgLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtlMsgLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginReq(CtlMsgLoginReq other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginReq Clone() {
      return new CtlMsgLoginReq(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtlMsgLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtlMsgLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtlMsgLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CtlMsgLoginRsp : pb::IMessage<CtlMsgLoginRsp> {
    private static readonly pb::MessageParser<CtlMsgLoginRsp> _parser = new pb::MessageParser<CtlMsgLoginRsp>(() => new CtlMsgLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtlMsgLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginRsp(CtlMsgLoginRsp other) : this() {
      errCode_ = other.errCode_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgLoginRsp Clone() {
      return new CtlMsgLoginRsp(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::GameSpec.ErrorCode errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.ErrorCode ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameSpec.Players player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.Players Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtlMsgLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtlMsgLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtlMsgLoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::GameSpec.Players();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = (global::GameSpec.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::GameSpec.Players();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CtlMsgSearchReq : pb::IMessage<CtlMsgSearchReq> {
    private static readonly pb::MessageParser<CtlMsgSearchReq> _parser = new pb::MessageParser<CtlMsgSearchReq>(() => new CtlMsgSearchReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtlMsgSearchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchReq(CtlMsgSearchReq other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchReq Clone() {
      return new CtlMsgSearchReq(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtlMsgSearchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtlMsgSearchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtlMsgSearchReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CtlMsgSearchRsp : pb::IMessage<CtlMsgSearchRsp> {
    private static readonly pb::MessageParser<CtlMsgSearchRsp> _parser = new pb::MessageParser<CtlMsgSearchRsp>(() => new CtlMsgSearchRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtlMsgSearchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchRsp(CtlMsgSearchRsp other) : this() {
      errCode_ = other.errCode_;
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtlMsgSearchRsp Clone() {
      return new CtlMsgSearchRsp(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::GameSpec.ErrorCode errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.ErrorCode ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameSpec.Players player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.Players Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtlMsgSearchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtlMsgSearchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtlMsgSearchRsp other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::GameSpec.Players();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = (global::GameSpec.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              Player = new global::GameSpec.Players();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveItemReq : pb::IMessage<RemoveItemReq> {
    private static readonly pb::MessageParser<RemoveItemReq> _parser = new pb::MessageParser<RemoveItemReq>(() => new RemoveItemReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveItemReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemReq(RemoveItemReq other) : this() {
      itemID_ = other.itemID_;
      count_ = other.count_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemReq Clone() {
      return new RemoveItemReq(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    /// itemid = 这个道具的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 数量  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    /// <summary>
    ///物品在背包的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveItemReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveItemRsp : pb::IMessage<RemoveItemRsp> {
    private static readonly pb::MessageParser<RemoveItemRsp> _parser = new pb::MessageParser<RemoveItemRsp>(() => new RemoveItemRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveItemRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemRsp(RemoveItemRsp other) : this() {
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItemRsp Clone() {
      return new RemoveItemRsp(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::GameSpec.ErrorCode errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.ErrorCode ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveItemRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveItemRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveItemRsp other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = (global::GameSpec.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankReq : pb::IMessage<RankReq> {
    private static readonly pb::MessageParser<RankReq> _parser = new pb::MessageParser<RankReq>(() => new RankReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReq(RankReq other) : this() {
      start_ = other.start_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankReq Clone() {
      return new RankReq(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private int end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (End != 0) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Start);
      }
      if (End != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Start);
      }
      if (End != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankReq other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.End != 0) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadInt32();
            break;
          }
          case 16: {
            End = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankRsp : pb::IMessage<RankRsp> {
    private static readonly pb::MessageParser<RankRsp> _parser = new pb::MessageParser<RankRsp>(() => new RankRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSpec.GameSpecReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRsp(RankRsp other) : this() {
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankRsp Clone() {
      return new RankRsp(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::GameSpec.ErrorCode errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSpec.ErrorCode ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankRsp other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrCode = (global::GameSpec.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
